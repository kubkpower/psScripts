param(    [switch]$cleanupSID)$computer = [ADSI](“WinNT://.,computer”)# Prepare output directory$logDir = join-path $env:temp cleanupSid |out-nullif ($false -eq (Test-Path $logDir)) { mkdir $logDir }# Prepare unresolved SID export files$logGroupFile = Join-Path $logdir "cleanupSid_group.csv"if ($true -eq (Test-Path $logGroupFile)) { Remove-Item $logGroupFile -Force |out-null}$logRegFile = Join-Path $logdir "cleanupSid_reg.csv"if ($true -eq (Test-Path $logRegFile)) { Remove-Item $logRegFile -Force |out-null}$logFsFile = Join-Path $logdir "cleanupSid_fs.csv" if ($true -eq (Test-Path $logFsFile)) { Remove-Item $logFsFile -Force |out-null}## Routines#function get-groupUnresolvedSID{    param($groupName)    $group = $computer.psbase.children.find($groupName)    $group.psbase.invoke(“Members”) | %{$_.GetType().InvokeMember(“ADsPath”,’GetProperty’,$null,$_,$null)} |? {$_ -like "WinNT://S-1*"} `        |% {[pscustomobject]@{            "groupname" = $group.name.ToString()            "unresolvedSID" = ($_ -split '//')[1]        }    }}# # Main functions#function check-groupUnresolvedSID{    param(    [bool]$removeOrphanedSid    )    $infos = get-localgroup |% { get-groupUnresolvedSID $_.name }    $infos        if ($removeOrphanedSid) {        $infos |% { Remove-LocalGroupMember -name $_.groupName -Member $_.unresolvedSID }    }}function check-fsUnresolvedSID{    Param(    [string]$path,    [bool]$removeOrphanedSid    )    $global:arr = @()    Get-ChildItem -Path $path -Recurse | ForEach-Object -Process {        $path = $_.fullname.Replace("[", "`[").Replace("]", "`]")        $acl = Get-Acl -LiteralPath $path            $sid = $acl.access | Where-Object -FilterScript {            $_.identityreference -match 'S-1-get-.*' -and !($_.isinherited)        }        if($sid)        {            $sid| ForEach-Object -Process {                $co = [pscustomobject]@{                    Path       = $path                    RemovedSID = $_.identityreference                }                #$co|Format-List                $arr += $co                $null = $acl.removeaccessrule($_)            }            if ($removeOrphanedSid) {                Set-Acl -LiteralPath $path -AclObject $acl            }        }    }    $arr}function check-regUnresolvedSID{    Param(    [string]$path,    [bool]$removeOrphanedSid    )    $global:arr = @()    @(Get-Item -Path $path) + (Get-ChildItem -Path $path -Recurse) | ForEach-Object -Process {        try {            $acl = Get-Acl $path -ErrorAction Stop            $sid = $acl.access | Where-Object -FilterScript {                $_.identityreference -match 'S-1-get-.*' -and !($_.isinherited)            }            if($sid)            {                $sid| ForEach-Object -Process {                    $co = [pscustomobject]@{                        Path       = $path                        RemovedSID = $_.identityreference                    }                    $co|Format-List                    $arr += $co                    $null = $acl.removeaccessrule($_)                }                if ($removeOrphanedSid) {                    Set-Acl -LiteralPath $path -AclObject $acl                }            }        } catch {}    }    $arr}## main Loop#Write-Output "Exporting results to: '$logDir'"if ($cleanupSID) {    Write-Output "Removing orphaned SID is ENABLED."} else {    Write-Output "Auditing orphaned SID"}Write-Output "Processing Group's orphaned SID: $logGroupFile"$groupOrphaned = @(check-groupUnresolvedSID -removeOrphanedSid:$cleanupSID)if ($groupOrphaned.count -gt 0) { $groupOrphaned | Export-Csv -Path $logGroupFile -NoTypeInformation -Delimiter ';' -Encoding Unicode }Write-Output "- found : $($groupOrphaned.count)"Write-Output "Processing FS's orphaned SID: $logFsFile"$localVolumes = Get-Volume |? {($_.drivetype -eq 'fixed')} |select @{Name="path";expression={$_.driveletter + ":\"}} |select -ExpandProperty path$fsOrphaned = @($localVolumes |% {check-fsUnresolvedSID -path $_ -removeOrphanedSid:$cleanupSID})if ($fsOrphaned.count -gt 0) { $fsOrphaned | Export-Csv -Path $logFsFile -NoTypeInformation -Delimiter ';' -Encoding Unicode }Write-Output "- found : $($fsOrphaned.count)"Write-Output "Processing Registry's orphaned SID: $logRegFile"$Hives = 'HKLM:\Software\'$regOrphaned = @($hives |% {check-regUnresolvedSID -path $_ -removeOrphanedSid:$cleanupSID})if ($regOrphaned.count -gt 0) { $regOrphaned | Export-Csv -Path $logRegFile -NoTypeInformation -Delimiter ';' -Encoding Unicode }Write-Output "- found : $($regOrphaned.count)"